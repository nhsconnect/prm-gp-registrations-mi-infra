name: base-degrades-reporting.yml
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Which environment to deploy to"
        required: true
        default: "dev"
      is_deployment:
        description: "Is workflow run on deployment"
        type: boolean
        default: false

jobs:
  terraform_process:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ (inputs.is_deployment && secrets.AWS_ASSUME_ROLE) || secrets.AWS_ASSUME_ROLE_READ_ONLY }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform format check
        id: fmt
        run: terraform fmt -check
        working-directory: ./stacks/degrades-reporting/terraform

      - name: Terraform Init
        id: init
        run: | 
          terraform init -no-color -backend-config="key=data-pipeline/degrades-reporting/terraform.tfstate" \
          -backend-config="bucket=${{ secrets.AWS_STATE_BUCKET }}" \
          -backend-config="dynamodb_table=${{ secrets.AWS_STATE_LOCK_TABLE }}"
        working-directory: ./stacks/degrades-reporting/terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./stacks/degrades-reporting/terraform

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Make Virtual Env
        working-directory: ./lambda/degrades-reporting
        run: |
          python3 -m venv venv

      - name: Build Lambdas
        run: | 
          make zip-degrades-lambdas

      - name: Setup Terraform variables
        working-directory: ./stacks/degrades-reporting/terraform
        run: |-
          cat > pipeline.auto.tfvars <<EOF
            environment = "${{ vars.AWS_ENVIRONMENT }}"
            degrades_message_queue = "${{ secrets.AWS_DEGRADES_MESSAGE_QUEUE }}"
            degrades_message_receiver_lambda_zip = "./lambda/build/degrades-message-receiver.zip"
            degrades_daily_summary_lambda_zip = "./lambda/build/degrades-daily-summary.zip"
            degrades_lambda_layer_zip = "./lambda/build/degrades-lambda-layer.zip"
            degrades_message_table = "${{ secrets.AWS_DEGRADES_MESSAGE_TABLE }}"
            registrations_mi_event_bucket = "${{ secrets.AWS_REGISTRATION_MI_EVENT_BUCKET }}"
            region = "${{ vars.AWS_REGION }}"
          EOF

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -var-file="../vars/${{ vars.AWS_ENVIRONMENT }}.tfvars" -out "${{ vars.AWS_ENVIRONMENT }}.tfplan"
          terraform show -no-color ${{ vars.AWS_ENVIRONMENT }}.tfplan > ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt
          echo "summary=$(grep -E 'Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\.|No changes\. Your infrastructure matches the configuration\.' ${{ vars.AWS_ENVIRONMENT }}.tfplan.txt | sed 's/.*No changes\. Your infrastructure matches the configuration/Plan: no changes/g' | sed 's/.*Plan: //g' | sed 's/\..*//g')" >> $GITHUB_OUTPUT
        working-directory: ./stacks/degrades-reporting/terraform
        shell: bash


      - name: Add PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && (success() || failure())
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Report for degrades-reporting environment: ${{ inputs.environment }}')
            });

            // 2. Prepare format of the comment
            const output = `### Report for degrades-reporting environment: ${{ inputs.environment }}

            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`


            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`


            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`


            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            Plan results: ${{ steps.plan.outputs.summary }}`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              })
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && inputs.is_deployment
        run: terraform apply -auto-approve -input=false ${{ vars.AWS_ENVIRONMENT }}.tfplan
        working-directory: ./stacks/degrades-reporting/terraform
